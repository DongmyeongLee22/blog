(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{484:function(v,_,t){v.exports=t.p+"assets/img/BTree.abea50bf.png"},525:function(v,_,t){"use strict";t.r(_);var a=t(56),l=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h3",{attrs:{id:"데이터-중심-애플리케이션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터-중심-애플리케이션"}},[v._v("#")]),v._v(" 데이터 중심 애플리케이션?")]),v._v(" "),a("ul",[a("li",[v._v("데이터 양, 데이터 복잡성, 데이터가 변하는 속도 등, 데이터가 주요  도전 과제인 애플리케이션을 "),a("code",[v._v("데이터 중심적(data-intensive)")]),v._v("이라고 한다.")]),v._v(" "),a("li",[v._v("반대로 CPU 사이클이 병목인 경우 "),a("code",[v._v("계산 중심적(compute-intensive)")]),v._v("이라고 한다.")])]),v._v(" "),a("h2",{attrs:{id:"chapter-1-신뢰할-수-있고-확장-가능하며-유지보수하기-쉬운-애플리케이션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-1-신뢰할-수-있고-확장-가능하며-유지보수하기-쉬운-애플리케이션"}},[v._v("#")]),v._v(" Chapter 1. 신뢰할 수 있고 확장 가능하며 유지보수하기 쉬운 애플리케이션")]),v._v(" "),a("p",[v._v("오늘날 많은 애플리케이션은 데이터 중심적으로 많은 애플리케이션들은 DB, Cache, Search Index, Stream Processing, Batch Processing 등을 필요로 한다.")]),v._v(" "),a("p",[v._v("애플리케이션마다 요구사항은 제각기 다르고 데이터 시스템 또한 다양한 특성 및 접근 방식을 가지고 있으므로 어떤 도구와 어떤 접근 방식이 애플리케이션과 가장 적합한지 생각해야 한다.")]),v._v(" "),a("h3",{attrs:{id:"신뢰성-reliability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#신뢰성-reliability"}},[v._v("#")]),v._v(" 신뢰성(Reliability)")]),v._v(" "),a("p",[v._v("하드웨어 결함, 소프트웨어 결함, 휴먼 에러와 같은 상황에서도 "),a("strong",[v._v("시스템은 지속적으로 올바르게 동작해야 한다.")])]),v._v(" "),a("h4",{attrs:{id:"결함-fault-과-장애-failure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#결함-fault-과-장애-failure"}},[v._v("#")]),v._v(" 결함(fault)과 장애(failure)")]),v._v(" "),a("ul",[a("li",[v._v("잘못된 수 있는 일을 결함이라고 부른다. 결함을 예측하고 대처할 수 있는 시스템을 "),a("code",[v._v("내결함성(fault-tolerant) 또는 탄력성(resilient)")]),v._v("을 지녔다고 말한다.")]),v._v(" "),a("li",[a("strong",[v._v("결함은 장애와 동일하지 않다.")]),v._v(" 결함은 사양에서 벗어난 시스템의 한 구성요소로 정의되지만, 장애는 사용자에게 필요한 서비스를 제공하기 못하고 시스템 전체가 멈춘 경우다.\n"),a("ul",[a("li",[v._v("결함 확률을 0으로 줄이는 것을 불가능하므로, "),a("strong",[v._v("결함으로 인해 장애가 발생하지 않게 내결함성 구조를 설계하는 것이 가장 좋다.")])])])])]),v._v(" "),a("h3",{attrs:{id:"확장성-scalability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#확장성-scalability"}},[v._v("#")]),v._v(" 확장성(Scalability)")]),v._v(" "),a("p",[v._v("시스템의 데이터 양, 트래픽 양, 복잡도등의 "),a("strong",[v._v("부하가 증가할 때 대처할 수 있는 시스템의 능력이다.")])]),v._v(" "),a("h4",{attrs:{id:"부하-기술하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#부하-기술하기"}},[v._v("#")]),v._v(" 부하 기술하기")]),v._v(" "),a("ul",[a("li",[v._v("현재 시스템의 부하를 간결하게 기술할 수 있어야 한다. 부하는 "),a("code",[v._v("부하 매개변수(초당 요청 수, DB Read and Write Ratio, Active User, Cache Hit Ratio 등)")]),v._v("로 나타낼 수 있다.")])]),v._v(" "),a("h4",{attrs:{id:"트위터-사례"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#트위터-사례"}},[v._v("#")]),v._v(" 트위터 사례")]),v._v(" "),a("ul",[a("li",[v._v("트위터의 주요 두 가지 동작은  "),a("code",[v._v("트윗 작성(팔로워에게 새로운 메시지 게시)과 홈 타임라인(팔로우한 사람이 작성한 트윗 확인)이다.")])]),v._v(" "),a("li",[v._v("트위터에서 확장성 문제는 주로 트윗 작성양이 아니라 해당 트윗을 팔로워에게 전파하는 것이다.")]),v._v(" "),a("li",[v._v("이를 구현하기 위한 두 가지 방법이 존재한다.\n"),a("ol",[a("li",[v._v("사용자가 홈 타임라인을 요청할 때 팔로우하는 사람들 찾아 트윗을 가져오는 쿼리를 작성한다.")]),v._v(" "),a("li",[v._v("각 사용자별 홈 타임라인 캐시를 유지하고, 트윗을 작성하면 팔로워들의 홈 타임라인 캐시에 추가한다.")])])]),v._v(" "),a("li",[v._v("평균적으로 트윗 작성보다 홈 타임라인 읽기 요청량이 훨씬 많기때문에 쓰기에 많은 일을하고, 읽기에 적은일을 하는 2번째 방식이 더 효율적이다.")]),v._v(" "),a("li",[a("strong",[v._v("팔로워가 매우 많다면?")]),v._v(" "),a("ul",[a("li",[v._v("팔로워가 3천만명이라면 2번째 방식은 트윗 작성 시 3천만건의 쓰기 요청이 필요할지도 모른다. 이런 경우엔 1번째 방식을 사용할 수 있게 하는게 효율적일 것이다.")])])]),v._v(" "),a("li",[a("strong",[v._v("트위터 사례에서 사용자당 팔로워의 분포가 부하에 큰 영항을 미치기 때문에 확장성을 논의할 때 "),a("code",[v._v("핵심 부하 매개변수")]),v._v("가 된다.")])])]),v._v(" "),a("h4",{attrs:{id:"성능-기술하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#성능-기술하기"}},[v._v("#")]),v._v(" 성능 기술하기")]),v._v(" "),a("ul",[a("li",[v._v("시스템의 부하를 기술하고나면 부하가 증가했을 때 어떤 일이 일어나는지 조사할 수 있다.")]),v._v(" "),a("li",[v._v("부하 매개변수를 증가시키고 시스템 자원을 유지하면 성능은 어떻게 될까?")]),v._v(" "),a("li",[v._v("부하 매개변수를 증가시켰을 때 성능을 유지하기 위해선 시스템 자원을 얼마나 늘려야 될까?")])]),v._v(" "),a("p",[v._v("위 질문을 답변하기 위해선 성능을 판단할 수 있는 수치가 필요하다.")]),v._v(" "),a("ul",[a("li",[v._v("보통 온라인 시스템에서는 "),a("code",[v._v("응답 시간(response time)")]),v._v("이 더 중요하다.")]),v._v(" "),a("li",[v._v("보통 일괄 처리 시스템에서는 "),a("code",[v._v("처리량(throughput)")]),v._v("이 더 중요하다.")])]),v._v(" "),a("h4",{attrs:{id:"지연-시간-latency-과-응답-시간-response-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#지연-시간-latency-과-응답-시간-response-time"}},[v._v("#")]),v._v(" 지연 시간(latency)과 응답 시간(response time)")]),v._v(" "),a("ul",[a("li",[v._v("지연 시간은 요청이 처리되길 기다리는 시간으로 서비스를 기다리며 휴지 상태인 시간을 말한다.")]),v._v(" "),a("li",[v._v("응답 시간은 클라이언트 관점에서 본 시간으로, 요청을 처리하는 실제 시간외에도 네트워크 지연과 큐 지연도 포함한다.")])]),v._v(" "),a("h4",{attrs:{id:"응답-시간은-백분위-percentile-를-사용하자"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#응답-시간은-백분위-percentile-를-사용하자"}},[v._v("#")]),v._v(" 응답 시간은 백분위(percentile)를 사용하자")]),v._v(" "),a("ul",[a("li",[v._v("응답 시간은 단순히 평균 값이 아니라 백분위를 활용하여 상황에 따라 기준에 맞게 사용하는 것이 좋다.")]),v._v(" "),a("li",[v._v("중앙값을 위해선 p50을 사용할 수 있을 것이다. 상위 백분위는 주로 p95, p99, p999가 일반적으로 사용된다.\n"),a("ul",[a("li",[v._v("p95의 응답 시간이 1.5초라면 100개 요청 중 95개의 응답시간은 1.5초 미만, 5개는 1.5초 이상을 의미한다.")])])]),v._v(" "),a("li",[v._v("아마존은 p999를 주로 사용하는데 이는 1000개 요청 중 가장 느린 1건을 포착한다. 이를 사용하는 이유는 보통 응답 시간이 가장 느린 요청을 경험한 고객들이 많은 구매를 해서 고객 중에 가장 많은 데이터를 보유한 소중한 고객이기 떄문이다.")])]),v._v(" "),a("h4",{attrs:{id:"부하-대응-접근-방식"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#부하-대응-접근-방식"}},[v._v("#")]),v._v(" 부하 대응 접근 방식")]),v._v(" "),a("ul",[a("li",[v._v("확장성은 보통 "),a("code",[v._v("용량 확장(sacle up)(수직 확장)과 규모 확장(scaling out)(수평 확장)")]),v._v("으로 구분한다.\n"),a("ul",[a("li",[v._v("가능하면 낮은 사양의 장비를 여러대로 분산할 수 있는 수평 확장이 효율적이지만 수평 확장이 어려운 서비스도 존재한다.")])])]),v._v(" "),a("li",[v._v("stateless 서비스는 수평 확장이 용이하지만 데이터 베이스와 같은 stateful 서비스의 경우엔 수평 확장을 하는데 많은 복잡성이 요구된다.")])]),v._v(" "),a("h4",{attrs:{id:"확장성을-갖춘-아키텍처"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#확장성을-갖춘-아키텍처"}},[v._v("#")]),v._v(" 확장성을 갖춘 아키텍처")]),v._v(" "),a("ul",[a("li",[v._v("모든 상황에 맞는 확장성을 보유한 아키텍처는 없다. 아키텍처를 결정하는 요소는 읽기의 양, 쓰기의 양, 저장할 데이터의 양, 응답 시간 요구사항, 접근 패턴등 다양하다.")]),v._v(" "),a("li",[v._v("1kB크기의 데이터 100,000건의 요청을 처리하는 시스템과 2GB크기의 데이터 3건의 요청을 처리하는 시스템은 서로 같은 처리량이라해도 아키텍처는 매우 다르다.")])]),v._v(" "),a("blockquote",[a("ul",[a("li",[v._v("특정 애플리케이션에 적합한 확장성을 갖춘 아키텍처는 주요 동적이 무엇이고, 잘 하지 않는 동작이 무엇인지에 대한 가정으로 구축된다. 이 가정은 "),a("code",[v._v("부하 매개변수")]),v._v("다.")]),v._v(" "),a("li",[v._v("이 가정이 잘못되면 확장에 대한 엔지니어링 노력은 헛수고가 된다. 검증되지 않은 제품의 경우 미래를 대비하기보단 빠르게 반복해서 제품 기능을 개선하는 작업이 좀 더 중요하다.")])])]),v._v(" "),a("h3",{attrs:{id:"유지보수성-maintainbility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#유지보수성-maintainbility"}},[v._v("#")]),v._v(" 유지보수성(Maintainbility)")]),v._v(" "),a("p",[v._v("소프트웨어 비용의 대부분은 초기 개발이 아니라 지속해서 이어지는 유지보수에 들어간다. 이런 유지보수에는 버그 수정, 시스템 운영, 장애 조사, 새로운 플래폼 적응, 기술 부채 상환, 새로운 기능 추가등 다양하다.")]),v._v(" "),a("p",[v._v("유지보수성을 위한 소프트웨어 시스템 설계 원칙은 다음과 같다.")]),v._v(" "),a("h4",{attrs:{id:"운용성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#운용성"}},[v._v("#")]),v._v(" 운용성")]),v._v(" "),a("ul",[a("li",[v._v("운영팀이 시스템을 원할하게 운영할 수 있게 쉽게 만들어라.")])]),v._v(" "),a("h4",{attrs:{id:"단순성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#단순성"}},[v._v("#")]),v._v(" 단순성")]),v._v(" "),a("ul",[a("li",[v._v("시스템에서 복잡도를 최대한 제거해 새로운 엔지니어가 이해하기 쉽게 만들어라.")]),v._v(" "),a("li",[v._v("복잡도는 다양한 증상으로 나타난다.\n"),a("ul",[a("li",[v._v("모듈 간 강한 커플링")]),v._v(" "),a("li",[v._v("복잡한 의존성")]),v._v(" "),a("li",[v._v("일관성 없는 네이밍")]),v._v(" "),a("li",[v._v("성능 문제 해결을 위한 해키한 방식으로 특별한 케이스를 해결")])])]),v._v(" "),a("li",[v._v("이러한 복잡도를 줄이면 유지보수성이 크게 향상된다. 단순성이 시스템의 핵심 목표여야 한다.")]),v._v(" "),a("li",[a("strong",[v._v("복잡도를 제거하기 위한 최상의 도구는 "),a("code",[v._v("추상화")]),v._v("이다.")]),v._v(" "),a("ul",[a("li",[v._v("좋은 추상화는 깔끔하고 직관적인 외관 아래로 많은 세부 구현을 숨길 수 있다.")]),v._v(" "),a("li",[v._v("고수준 프로그래밍 언어는 기계 언어, CPU 레지스터, 시스템 호출을 숨긴 추상화다.")])])])]),v._v(" "),a("h4",{attrs:{id:"발전성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#발전성"}},[v._v("#")]),v._v(" 발전성")]),v._v(" "),a("ul",[a("li",[v._v("엔지니어가 이후에 시스템을 쉽게 변경할 수 있게 하라.")]),v._v(" "),a("li",[v._v("서비스가 살아있는 한 시스템은 반드시 변경된다.")]),v._v(" "),a("li",[v._v("시스템 변경을 쉽게 하고 변화된 요구사항에 시스템을 맞추는 방법은 시스템의 간단함과 추상화에 밀접하게 관련된다.")])]),v._v(" "),a("h3",{attrs:{id:"정리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정리"}},[v._v("#")]),v._v(" 정리")]),v._v(" "),a("p",[v._v("애플리케이션이 유용하려면 다양한 요구사항을 충족시켜야 한다. 다양한 요구사항에는 **기능적 요구사항(데이터 저장, 조회 및 검색)**과 **비기능적 요구사항(보안, 법규 준수, 확장성, 호환성, 유지보수성)**이 있다.")]),v._v(" "),a("p",[a("strong",[v._v("신뢰성")]),v._v("은 결함이 발생해도 시스템이 올바르게 동작하게 만든다는 의미다.")]),v._v(" "),a("p",[a("strong",[v._v("확장성")]),v._v("은 부하가 증가해도 좋은 성능을 유지하기 위한 전략을 의미한다.")]),v._v(" "),a("p",[a("strong",[v._v("유지보수성")]),v._v("은 시스템에서 작업하는 엔지니어와 운영 팀의 삶을 개선하는데 있다.")]),v._v(" "),a("h2",{attrs:{id:"chapter-2-데이터-모델과-질의-언어"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-2-데이터-모델과-질의-언어"}},[v._v("#")]),v._v(" Chapter 2. 데이터 모델과 질의 언어")]),v._v(" "),a("p",[v._v("데이터 모델은 소프트웨어가 어떻게 작성됐는지 뿐만 아니라 "),a("strong",[v._v("해결하려는 문제를 어떻게 생각해야 하는지")]),v._v("에 대해서도 큰 영향을 미치므로 데이터 모델을 선택하는 작업은 상당히 중요하다.")]),v._v(" "),a("h3",{attrs:{id:"관계형-데이터-모델"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#관계형-데이터-모델"}},[v._v("#")]),v._v(" 관계형 데이터 모델")]),v._v(" "),a("p",[v._v("테이블 간의 관계로 데이터가 구성되고 각 관계는 순서 없는 튜플의 모임으로 이루어진 가장 널리 알려진 전통적인 데이터 모델이다.")]),v._v(" "),a("h4",{attrs:{id:"nosql의-탄생"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nosql의-탄생"}},[v._v("#")]),v._v(" NoSQL의 탄생")]),v._v(" "),a("ul",[a("li",[v._v("NoSQL(Not Only SQL) 데이터베이스가 인기를 얻는데는 다음과 같은 원동력이 있다.\n"),a("ul",[a("li",[v._v("대규모 데이터를 빠르게 처리할 수 있는 뛰어난 확장성 필요")]),v._v(" "),a("li",[v._v("무료 오픈소스 소프트웨어의 선호도 확산")]),v._v(" "),a("li",[v._v("관계형 모델에서 지원하지 않는 특수 질의 동작 지원")]),v._v(" "),a("li",[v._v("관계형 스키마의 제한에 대한 불만과 더욱 동적이고 풍부한 데이터 모델에 대한 바람")])])])]),v._v(" "),a("h3",{attrs:{id:"문서-데이터-모델"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#문서-데이터-모델"}},[v._v("#")]),v._v(" 문서 데이터 모델")]),v._v(" "),a("p",[v._v("관련된 데이터들이 하나의 문서에 표현되어 있는 모델로 많이 사용되는 JSON 모델이 대표적이다.")]),v._v(" "),a("p",[v._v("문서 데이터 모델은 조인에 약하기 때문에 다대다 관계가 필요하지 않는 애플리케이션에서 유용하게 사용할 수 있다.")]),v._v(" "),a("ul",[a("li",[v._v("애플리케이션에서 다대다 관계를 사용한다면 각 문서에 저장된 비정규화된 데이터의 일관성을 유지하기 위해 추가적인 작업이 필요해진다.")])]),v._v(" "),a("h4",{attrs:{id:"문서-모델에서의-스키마-유연성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#문서-모델에서의-스키마-유연성"}},[v._v("#")]),v._v(" 문서 모델에서의 스키마 유연성")]),v._v(" "),a("ul",[a("li",[v._v("문서 데이터베이스는 종종 스키마리스로 불리지만 데이터베이스가 이를 강요하지 않을 뿐 암묵적인 스키마는 여전히 존재한다.\n"),a("ul",[a("li",[v._v("문서 데이터베이스에 쓰기를 수행할 땐 스키마 제한이 없지만 해당 문서를 읽어올 때 애플리케이션에서 스키마를 맞추기 위한 추가적인 처리가 필요하다.")]),v._v(" "),a("li",[v._v("즉, 문서 데이터베이스는 쓰기 스키마(전통적인 RDB 접근 방식으로 명시적으로 모든 데이터가 스키마를 따르고 있음을 보장)가 아닌 읽기 스키마다(암시적으로 데이터를 읽을 때 애플리케이션에서 스키마를 결정).")])])])]),v._v(" "),a("h3",{attrs:{id:"그래프형-데이터-모델"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#그래프형-데이터-모델"}},[v._v("#")]),v._v(" 그래프형 데이터 모델")]),v._v(" "),a("p",[v._v("그래프는 정점(vertex)과 간선(edge)으로 이루어진 데이터 모델으로 관계형 모델은 단순한 다대다 관계를 다룰 수 있지만 데이터 간 연결이 복잡해지면 그래프로 데이터를 모델링하는 것이 좋다.")]),v._v(" "),a("h3",{attrs:{id:"데이터를-위한-질의-언어"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터를-위한-질의-언어"}},[v._v("#")]),v._v(" 데이터를 위한 질의 언어")]),v._v(" "),a("p",[v._v("SQL같은 "),a("strong",[v._v("선언형 질의 언어에서는")]),v._v(" 목표를 달성하기 위한 "),a("code",[v._v("방법")]),v._v("이 아니라 결과가 충족해야 하는 조건과 데이터를 어떻게 변환할지를 지정하기만 하면 된다.")]),v._v(" "),a("p",[v._v("선언형 질의 언어는 일반적으로 명령형 API보다 더 간결하다는 장점이 있다. 더 중요한 것은 상세 구현이 숨겨져있어 질의를 변경하지 않고도 시스템의 성능을 향상시킬 수 있다는 점이다.")]),v._v(" "),a("h2",{attrs:{id:"chapter-3-저장소와-검색"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-3-저장소와-검색"}},[v._v("#")]),v._v(" Chapter 3. 저장소와 검색")]),v._v(" "),a("p",[v._v("특정 작업부하(workload) 유형에서 좋은 성능을 내게끔 저장소 엔진을 조정하기 위해 엔진 내부에서 수행되는 작업에 대해 대략적인 개념을 이해할 필요가 있다.")]),v._v(" "),a("h3",{attrs:{id:"추가-전용-로그"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#추가-전용-로그"}},[v._v("#")]),v._v(" 추가 전용 로그")]),v._v(" "),a("p",[v._v("많은 데이터베이스는 내부적으로 추가 전용 데이터 파일인 로그를 사용한다.")]),v._v(" "),a("p",[v._v("여기서의 로그는 애플리케이션에서 사용되는 로그가 아니라 "),a("code",[v._v("추가 전용 레코드")]),v._v("라는 의미로 사용된다.")]),v._v(" "),a("h4",{attrs:{id:"세그먼트와-컴팩션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#세그먼트와-컴팩션"}},[v._v("#")]),v._v(" 세그먼트와 컴팩션")]),v._v(" "),a("ul",[a("li",[v._v("파일에 데이터를 항상 추가만 한다면 결국 디스크 공간은 부족해진다. 이를 해결하기 위해 "),a("strong",[v._v("특정 크기의 세그먼트로 로그를 나누고, 컴팩션을 수행하면 된다.")])]),v._v(" "),a("li",[v._v("로그 구조화 저장소 세그먼트는 키-값 쌍의 연속으로 이루어지며 순차쓰기를 하므로 같은 키를 갖는 나중 값이 우선시된다.")]),v._v(" "),a("li",[v._v("컴팩션은 로그에서 중복된 키를 버리고 각 키의 최신 갱신 값만 유지하는 것을 의미한다.\n"),a("ul",[a("li",[v._v("컴팩션을 수행하면 세그먼트는 작아지므로 동시에 여러 세그먼트들을 병합할 수 있다.")])])])]),v._v(" "),a("h4",{attrs:{id:"추가-전용-로그는-낭비인가"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#추가-전용-로그는-낭비인가"}},[v._v("#")]),v._v(" 추가 전용 로그는 낭비인가?")]),v._v(" "),a("ul",[a("li",[v._v("추가 전용 로그는 데이터를 계속해서 추가하기 때문에 낭비같아 보이지만 여러 측면에서 장점을 가진다.\n"),a("ol",[a("li",[v._v("순차적인 쓰기이므로 추가 및 병합이 무작위 쓰기보다 훨씬 빠르다.")]),v._v(" "),a("li",[v._v("세그먼트 파일이 추가전용이나 불변이면 동시성과 고장 복구가 같단하다.")])])])]),v._v(" "),a("h3",{attrs:{id:"인덱스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#인덱스"}},[v._v("#")]),v._v(" 인덱스")]),v._v(" "),a("p",[v._v("인덱스는 기본 데이터(primary data)에서 파생된 추가적인 구조다.")]),v._v(" "),a("p",[v._v("추가적인 구조의 유지보수는 특히 "),a("strong",[v._v("쓰기 과정에서 오버헤드가 발생한다.")]),v._v(" 데이터를 쓸 때마다 매번 인덱스를 갱신해야 하기 떄문이다")]),v._v(" "),a("p",[a("strong",[v._v("인덱스를 잘 선택하면 읽기 성능이 좋아지지만, 모든 인덱스는 쓰기 속도를 떨어뜨린다.")])]),v._v(" "),a("h4",{attrs:{id:"해시-테이블-인덱스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#해시-테이블-인덱스"}},[v._v("#")]),v._v(" 해시 테이블 인덱스")]),v._v(" "),a("ul",[a("li",[v._v("인메모리 해시 맵을 유지하여 인덱스를 유지하는 방법이다.")]),v._v(" "),a("li",[v._v("고유 키 수가 적고 각 키의 값이 자주 갱신되는 경우에 적합하다.")]),v._v(" "),a("li",[v._v("하지만 인메모리 방식은 키가 너무 많으면 유지할 수고, 해시 테이블의 경우 range query에 효율적이지 못하다.")]),v._v(" "),a("li",[v._v("SS테이블과 LSM트리는 이러한 제한이 없는 인덱스 구조이다.")])]),v._v(" "),a("h3",{attrs:{id:"ss테이블과-lsm트리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ss테이블과-lsm트리"}},[v._v("#")]),v._v(" SS테이블과 LSM트리")]),v._v(" "),a("p",[v._v("키-값 쌍을 가지는 세그먼트 파일 형식에서 키-값쌍을 "),a("strong",[v._v("키로 정렬")]),v._v("하는 형식을 "),a("strong",[v._v("SS(Sorted String)테이블")]),v._v("이라고 부른다.")]),v._v(" "),a("p",[a("strong",[v._v("SS테이블은 해시 테이블 인덱스를 가진 로그 세그먼트보다 몇 가지 큰 장점을 가진다.")])]),v._v(" "),a("ol",[a("li",[v._v("병합정렬 알고리즘과 유사한 방식을 통해 세그먼트 병합이 간단하고 효율적이다.")])]),v._v(" "),a("ul",[a("li",[v._v("세그먼트 병합 시 각 세그먼트의 첫 번째 키들을 비교하여 낮은 키들을 하나씩 뽑아와서 병합한다.(중복키들은 최신꺼 한개만 가져옴)")])]),v._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[v._v("파일에서 특정 키를 찾기 위해 더는 메모리에 모든 키의 인덱스를 유지할 필요가 없다.")])]),v._v(" "),a("ul",[a("li",[v._v("모든 키가 정렬상태로 저장되기 때문에 "),a("strong",[v._v("메모리에는 특정 키들의 인덱스만 유지")]),v._v("하고 입력 키와 가장 근접한 인덱스 하위, 상위 값을 파악하여 효율적으로 스캔할 수 있다.")])]),v._v(" "),a("h4",{attrs:{id:"ss테이블-생성과-유지"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ss테이블-생성과-유지"}},[v._v("#")]),v._v(" SS테이블 생성과 유지")]),v._v(" "),a("ul",[a("li",[v._v("키를 정렬하여 저장하기 위해서는 단순히 쓰기를 저장하면 안된다.")]),v._v(" "),a("li",[v._v("정렬을 유지하기 위한 방법으론 레드 블랙 트리와 같은 트리 데이터 구조를 활용하는게 대표적이다.")]),v._v(" "),a("li",[v._v("그리고 정렬된 구조를 유지를 디스크가 아닌 메모리에 유지하는 편이 훨씬 쉬울 것이다.")]),v._v(" "),a("li",[v._v("쓰기가 들어오면 인메모리 레드 블랙 트리와 같은 인메모리 균형 트리에 데이터를 추가하며 이 인메모리 트리를 "),a("code",[v._v("멤테이블(memtable)")]),v._v("이라고 한다.")]),v._v(" "),a("li",[v._v("멤테이블이 임곗값에 도달하면 SS테이블 파일로 디스크에 기록한다. "),a("strong",[v._v("트리가 이미 키로 정렬되어있으므로 효율적으로 수행 가능하다.")]),v._v(" "),a("ul",[a("li",[v._v("새로운 SS테이블 파일은 DB의 가장 최신 세그먼트가 되고, SS 테이블에 기록하는 동안 새로운 쓰기는 새로운 멤테이블에 수행된다.")])])]),v._v(" "),a("li",[a("code",[v._v("읽기 요청")]),v._v("시 먼저 멤테이블에서 키를 찾고, 그 다음 디스크에서 가장 최신 세그먼트순으로 찾는다.")]),v._v(" "),a("li",[v._v("백그라운드에서 지속적으로 세그먼트 파일을 "),a("code",[v._v("컴팩션하고 병합")]),v._v("하는 과정을 수행한다.\n"),a("ul",[a("li",[a("strong",[v._v("이러한 방식으로 디스크에 쓰면 순차적이기 때문에 매우 높은 쓰리 처리량을 보장할 수 있게 된다.")])])])]),v._v(" "),a("li",[v._v("DB 고장 시를 대비하기 위해 멤테이블에 쓰기 작성 시 디스크에도 멤테이블 복원용 로그를 남기는 것이 필요하다.\n"),a("ul",[a("li",[v._v("해당 로그는 복원시에만 사용되므로 정렬이 필요 없다.")])])]),v._v(" "),a("li",[a("strong",[v._v("이렇게 정렬된 파일 병합과 컴팩션 원리를 기반으로 하는 저장소 엔진을 "),a("code",[v._v("LSM(Log-Structured Merge-Tree) 저장소 엔진")]),v._v("이라고 부른다.")]),v._v(" "),a("ul",[a("li",[v._v("이러한 구조를 따르는 DB는 BigTable, Cassandra, HBase등이 있다.")])])])]),v._v(" "),a("h4",{attrs:{id:"lsm-트리-알고리즘-성능-최적화"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lsm-트리-알고리즘-성능-최적화"}},[v._v("#")]),v._v(" LSM 트리 알고리즘 성능 최적화")]),v._v(" "),a("ul",[a("li",[v._v("LSM 트리 알고리즘은 DB에 존재하지 않는 키를 찾는 경우 멤테이블부터 가장 오래된 세그먼트까지 읽어야하므로 느릴 수 있다.")]),v._v(" "),a("li",[v._v("이런 종류의 접근을 최적화하기 위해 보통 "),a("strong",[v._v("블룸 필터(Bloom filter)를 추가적으로 사용한다.")]),v._v(" "),a("ul",[a("li",[v._v("블룸 필터는 키가 DB에 존재하지 않음 알려줄 수 있는 확률적 자료구조다. "),a("a",{attrs:{href:"https://d2.naver.com/helloworld/749531",target:"_blank",rel:"noopener noreferrer"}},[v._v("참고"),a("OutboundLink")],1)]),v._v(" "),a("li",[v._v("블룸 필터가 DB에 키가 있다고 했을 때 실제로 DB에 키가 없을 순 있지만, DB에 키가 없다고 했다면 반드시 DB에도 존재하지 않는다.")])])]),v._v(" "),a("li",[v._v("SS테이블 압축하고 병합하는 순서와 시기를 결정하는 다양한 전략도 존재한다.\n"),a("ul",[a("li",[a("strong",[v._v("크기 계층(size-tiered)컴팩션")]),v._v("은 상대적으로 작은 SS테이블을 상대적으로 오래된 큰 SS테이블에 병합한다.")]),v._v(" "),a("li",[a("strong",[v._v("레벨 컴팩션")]),v._v('은 키 범위를 더작은 SS테이블로 나누고 오래된 데이터는 개별 "레벨"로 이동시켜 컴팩션을 점진적으로 진행한다.')])])])]),v._v(" "),a("h3",{attrs:{id:"b-트리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-트리"}},[v._v("#")]),v._v(" B 트리")]),v._v(" "),a("p",[v._v("B 트리는 대부분의 RDB에서 사용되는 인덱스 구조로 LSM 인덱스 방식와 상당히 다르다.")]),v._v(" "),a("p",[a("strong",[v._v("B 트리도 SS테이블과 동일하게 키로 정렬된 키-값 쌍을 유지하지만 공통점은 이게 전부이고 설계 철학이 매우 다르다.")])]),v._v(" "),a("ul",[a("li",[v._v("LSM트리 기반 DB는 일반적으로 수 MB이상의 가변 크기를 가진 세그먼트로 나누고 항상 순차적으로 세그먼트를 기록한다.")]),v._v(" "),a("li",[a("strong",[v._v("반면 B 트리는 전통적으로 고정된 크기(4KB)의 "),a("code",[v._v("블록")]),v._v("이나 "),a("code",[v._v("페이지")]),v._v("로 나누고 한 번에 하나의 페이지에 읽기 또는 쓰기를 한다.")])])]),v._v(" "),a("p",[v._v("각 페이지는 주소나 위치를 이용해 식별할 수 있고 하나의 페이지가 여러 키와 하위 페이지를 참조할 수 있다(메모리가 아닌 디스크에 있을 뿐 포인터와 비슷하다.)")]),v._v(" "),a("p",[v._v("한 페이지는 B 트리의 root로 지정되고 인덱스에서 키를 찾으려면 루트에서 시작하여 참조된 하위 페이지로 이동하여 "),a("strong",[v._v("최종적으로 개별키를 포함한 리프(leaf) 페이지에 도달한다.")])]),v._v(" "),a("ul",[a("li",[v._v("B 트리의 한 페이지에서 하위 페이지를 참조하는 수를 "),a("code",[v._v("분기 계수(branching factor)")]),v._v("라고 부르며 보통 수백 개에 달한다.")])]),v._v(" "),a("h4",{attrs:{id:"키의-값-갱신-및-새로운-키-저장하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#키의-값-갱신-및-새로운-키-저장하기"}},[v._v("#")]),v._v(" 키의 값 갱신 및 새로운 키 저장하기")]),v._v(" "),a("ul",[a("li",[v._v("B 트리에 존재하는 키의 값을 갱신하려면 키를 포함하고 있는 리프 페이지를 검색하고 페이지의 값을 바꾼 다음 페이지를 디스크에 다시 기록한다.")]),v._v(" "),a("li",[v._v("새로운 키를 추가하려면 새로운 키를 포함하는 범위의 페이지를 찾아 해당 페이지에 키와 값을 추가하면 된다.\n"),a("ul",[a("li",[v._v("만약 해당 페이지에 여유 공간이 없다면 아래 사진과 같이 해당 페이지를 반쯤 채워진 페이지 둘로 나누고 상위 페이지가 새로운 키 범위의 하위 부분들을 알 수 있게 참조를 갱신한다.")])])])]),v._v(" "),a("img",{attrs:{src:t(484),width:"800",height:"500"}}),v._v(" "),a("ul",[a("li",[v._v("키 추가 알고리즘은 트리가 계속 "),a("code",[v._v("균형")]),v._v("을 유지하는 것을 보장하므로 깊이가 항상 O(logN)이다.")]),v._v(" "),a("li",[a("strong",[v._v("대부분 DB는 B 트리의 깊이가 3이나 4단계면 충분하므로 검색하려는 페이지를 찾기 위해 많은 페이지 참조를 따라가지 않아도 된다.")]),v._v(" "),a("ul",[a("li",[v._v("분기 계수 500의 4KB 페이지의 4단계 트리는 256TB까지 저장 가능하다.")])])])]),v._v(" "),a("h4",{attrs:{id:"신뢰할-수-있는-b-트리-만들기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#신뢰할-수-있는-b-트리-만들기"}},[v._v("#")]),v._v(" 신뢰할 수 있는 B 트리 만들기")]),v._v(" "),a("ul",[a("li",[v._v("B 트리의 기본적인 쓰기 동작은 새로운 데이터를 디스크 상의 페이지에 덮어쓴다.\n"),a("ul",[a("li",[a("strong",[v._v("LSM 트리 방식는 한번 쓰여진 데이터는 변경되지 않고 계속해서 추가만 되기 때문에 매우 대조적이다.")])])])]),v._v(" "),a("li",[v._v("삽입으로 인한 페이지 분리와 같은 동작은 여러 페이지의 덮어쓰기를 필요로 한다.\n"),a("ul",[a("li",[v._v("분할된 두 페이지를 기록하고 두 하위 페이지의 참조를 갱신하게끔 상위 페이지를 덮어쓰기 해야 함.")])])]),v._v(" "),a("li",[a("strong",[v._v("일부 페이지만 기록하고 DB가 고장나면 결국 인덱스가 훼손되므로 매우 위험한 동작이다.")])]),v._v(" "),a("li",[a("strong",[v._v("DB 고장에 스스로 복구 가능하도록 일반적으로 디스크 상에 쓰기 전 로그(write-ahead log. WAL)를 추가하여 B 트리를 구현한다.")])]),v._v(" "),a("li",[v._v("같은 자리에 페이지를 갱신하기 때문에 동시성 제어가 필요하고 보통 래치를 활용한다.\n"),a("ul",[a("li",[v._v("LSM 트리 방식은 데이터가 불변하므로 동시성 제어가 따로 필요하지 않다.")])])])]),v._v(" "),a("h4",{attrs:{id:"b-트리-최적화"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-트리-최적화"}},[v._v("#")]),v._v(" B 트리 최적화")]),v._v(" "),a("ul",[a("li",[v._v("페이지에 전체 키가 아닌 키를 축약해서 공간을 절약한다.\n"),a("ul",[a("li",[v._v("키 범위 사이의 경계만 표현하는데 문제만 없다면 키를 축약할 수 있어 높은 분기 계수를 얻을 수 있다.(흔히 B+ 트리라고 함)")])])]),v._v(" "),a("li",[a("strong",[v._v("키 범위가 가까운 값을 가지는 리프 페이지들을 디스크 상에 연속된 순으로 배치")]),v._v("하려고 시도하여 효율적으로 디스크 탐색을 가능하도록 한다.\n"),a("ul",[a("li",[v._v("트리가 커질 수록 순서를 유지하는데 어렵다.")]),v._v(" "),a("li",[v._v("LSM 트리는 병합 시 연속된 키 순으로 세그먼트를 다시 쓰기 때문에 연속된 키를 서로 가깝게 유지하기 쉽다.")])])]),v._v(" "),a("li",[v._v("각 리프 페이지의 양쪽 형제에 대한 참조를 가지도록 하여 상위 페이지로 이동하지 않고 순서대로 스캔이 가능하게 한다.")])]),v._v(" "),a("h3",{attrs:{id:"b-트리-vs-lsm-트리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-트리-vs-lsm-트리"}},[v._v("#")]),v._v(" B 트리 vs LSM 트리")]),v._v(" "),a("ul",[a("li",[v._v("B 트리가 LSM 트리보다 일반적으로 구현 성숙도가 높으나 LSM 트리의 성능 특성으로 인해 관심이 많아졌다.")]),v._v(" "),a("li",[a("strong",[v._v("저자 경험으로 LSM 트리는 보통 쓰기에서 더 빠르고, B 트리는 읽기에서 더 빠르다고 여긴다.")]),v._v(" "),a("ul",[a("li",[v._v("읽기가 보통 LSM 트리에서 더 느린 이유는 각 컴팩션 단계에 있는 여러 가지 데이터구조와 SS테이블을 확인해야 하기 때문이다.")])])]),v._v(" "),a("li",[a("strong",[v._v("정확한 비교를 위해선 실제로 필요한 작업부하로 시스템을 테스트해봐야 한다.")])])]),v._v(" "),a("h4",{attrs:{id:"lsm-트리의-장점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lsm-트리의-장점"}},[v._v("#")]),v._v(" LSM 트리의 장점")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("LSM 트리는 보통 B 트리보다 쓰기 처리량을 높게 유지할 수 있다.")]),v._v(" "),a("ul",[a("li",[v._v("B 트리는 모든 데이터 조각을 최소한 두 번 기록해야 한다. 쓰기 전 로그에 한 번, 트리 페이지에 한 번이다.")]),v._v(" "),a("li",[v._v("LSM 트리 인덱스 또한 SS테이블의 반복되는 컴팩션과 병합으로 인해 여러 번 데이터를 다시 쓴다.")]),v._v(" "),a("li",[v._v("DB 쓰기 한 번에 의해 여러 번의 쓰기를 야기하는 효과를 "),a("code",[v._v("쓰기 증폭(write amplification)")]),v._v("이라 한다.")]),v._v(" "),a("li",[v._v("LSM 트리 방식이 B 트리에 비해 쓰기 증폭이 더 낮기 때문에 쓰기 효율이 뛰어나다.")])])]),v._v(" "),a("li",[a("strong",[v._v("LSM 트리는 압축률이 좋아 보통 B 트리보다 디스크에 더 적은 파일을 생성한다.")]),v._v(" "),a("ul",[a("li",[v._v("B 트리는 구조상 고정된 페이지를 사용하므로 파편화가 발생한다.")]),v._v(" "),a("li",[v._v("LSM 트리는 고정된 페이지가 아닌 가변크기의 세그먼트를 사용하고 주기적으로 파편화를 없애기 위해 SS테이블을 다시 기록하기 때문에 저장소 오버헤드가 더 낮다.")])])])]),v._v(" "),a("h4",{attrs:{id:"lsm-트리의-단점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lsm-트리의-단점"}},[v._v("#")]),v._v(" LSM 트리의 단점")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("컴팩션 과정이 때로는 진행 중인 읽기와 쓰기 성능에 영향을 준다.")]),v._v(" "),a("ul",[a("li",[v._v("저장소 엔진은 컴팬션을 점진적으로 수행하고 동시 접근의영향이 없게 수행하려 한다.")]),v._v(" "),a("li",[v._v("하지만 디스크가 가진 자원은 한계가 있다. 그래서 디스크에서 비싼 컴팩션 연산이 끝날 때 까지 요청이 대기해야 하는 상황이 발생할 수 있다.")]),v._v(" "),a("li",[v._v("이로 인해 평균 응답 시간 성능에 영향은 적으나 상위 백분위(p95, p99, p999) 응답 시간은 때때로 꽤 길다.")])])]),v._v(" "),a("li",[a("strong",[v._v("컴팩션이 많은 디스크 대역폭을 사용해 높은 쓰기 처리량에 영향을 준다.")]),v._v(" "),a("ul",[a("li",[v._v("초기 쓰기(logging)과 멤테이블을 디스크로 방출과 백그라운드에서 수행되는 컴팩션 스레드가 유한한 쓰기 디스크 쓰기 대역폭을 공유해야 한다.")]),v._v(" "),a("li",[v._v("DB가 점점 커질 수록 컴팩션에 더 많은 디스크 대역폭이 필요해진다.")])])]),v._v(" "),a("li",[a("strong",[v._v("컴팩션 설정이 적절하지 컴팩션이 않아 유입 쓰기 속도를 따라갈 수 없다면 디스크 상에 병합되지 않은 세그먼트 수는 디스크 공간이 부족할 때 까지 증가한다")]),v._v(" "),a("ul",[a("li",[v._v("확인해야 할 세그먼트도 늘어나니 읽기 성능에도 영향을 준다.")]),v._v(" "),a("li",[v._v("보통 이런 상황에 대해 자동으로 속도를 조절하는 기능이 없으므로 "),a("strong",[v._v("명시적인 모니터링이 필요")]),v._v("하다.")])])]),v._v(" "),a("li",[a("strong",[v._v("강력한 트랜잭션 시맨틱을 제공하기 어렵다.")]),v._v(" "),a("ul",[a("li",[v._v("B 트리는 각 키가 색인의 딱 한 곳에만 존재하지만 LSM 트리는 다른 세그먼트에 같은 키의 다중 복사본이 존재할 수 있다.")])])])]),v._v(" "),a("h3",{attrs:{id:"기타-색인-구조"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#기타-색인-구조"}},[v._v("#")]),v._v(" 기타 색인 구조")]),v._v(" "),a("ul",[a("li",[v._v("B 트리, LSM 트리는 키-값 색인에 사용할 수 있다. 키-값 색인의 대표적인 예는 관계형 모델의 PK 색인이다.")]),v._v(" "),a("li",[v._v("하지만 LSM 트리, B 트리를 "),a("code",[v._v("보조 색인(secondary index)")]),v._v("으로 사용하는 방식도 매우 일반적이다. 보조 색인은 키-값 색인에서 쉽게 생성할 수 있다.\n"),a("ul",[a("li",[a("strong",[v._v("보조색인과 PK와의 주요 차이점은 키가 고유하지 않다는 점이다.")])])])])]),v._v(" "),a("h4",{attrs:{id:"인덱스-안에-값-저장하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#인덱스-안에-값-저장하기"}},[v._v("#")]),v._v(" 인덱스 안에 값 저장하기")]),v._v(" "),a("ul",[a("li",[v._v("인덱스에서 키는 질의가 검색하는 대상이지만 "),a("strong",[v._v("값은 다음 두가지 중에 하나에 해당한다.")]),v._v(" "),a("ul",[a("li",[v._v("실제 로우")]),v._v(" "),a("li",[v._v("다룬 곳에 저장된 로우를 가르키는 참조")])])]),v._v(" "),a("li",[v._v("후자의 경우 로우가 저장된 곳을 "),a("code",[v._v("힙 파일")]),v._v("이라고 하며 특정 순서 없이 데이터를 저장한다.\n"),a("ul",[a("li",[v._v("힙 파일 접근법은 여러 보조 색인이 존재할 때 데이터 중복을 피할 수 있으므로 일반적인 방식이다.")])])]),v._v(" "),a("li",[a("strong",[v._v("색인에서 힙 파일로 다시 이동하는 일은 읽기 성능에 불이익이 많으므로 어떤 상황에서는 인덱스안에 바로 인덱스된 로우를 저장하는 편이 바람직하다. 이를 "),a("code",[v._v("클러스터드 색인")]),v._v("이라고 한다.")]),v._v(" "),a("ul",[a("li",[v._v("MYSQL의 InnoDB에서는 테이블의 PK가 언제나 "),a("code",[v._v("클러스터드 색인")]),v._v("이고 보조 색인은 힙 파일의 위치가 아닌 기본키를 참조한다.")])])]),v._v(" "),a("li",[v._v("클러스터드 색인(인덱스 안에 모든 로우 데이터를 저장)과 비클러스터드 색인(인덱스 안에 데이터의 참조만 저장) 사이의 절충안을 "),a("code",[v._v("커버링 인덱스")]),v._v("라고 하는데 이 색인은 색인 안에 테이블의 칼럼 일부를 저장한다.\n"),a("ul",[a("li",[v._v("이렇게 하면 색인만 사용해 일부 질의에 응답하는가능하며 이런 경우를 인덱스가 질의를 "),a("code",[v._v("커버")]),v._v("했다고 말한다.")])])])]),v._v(" "),a("blockquote",[a("p",[v._v("모든 종류의 데이터 복제와 마찬가지로 클러스터드 인덱스와 커버링 인덱스는 읽기 성능을 높일 수 있지만 추가적인 저장소가 필요하고 쓰기 과정에 오버헤드가 발생한다.")])]),v._v(" "),a("h4",{attrs:{id:"다중-컬럼-인덱스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#다중-컬럼-인덱스"}},[v._v("#")]),v._v(" 다중 컬럼 인덱스")]),v._v(" "),a("ul",[a("li",[v._v("다중 칼럼 인덱스의 가장 일반적인 유형은 "),a("code",[v._v("결합 인덱스")]),v._v("로 하나의 키에 여러 필드를 단순히 결합한다.")]),v._v(" "),a("li",[v._v("인덱스는 순서가 정렬되어 있기 때문에 해당 인덱스를 사용하기 위해선 첫번째에 위치한 인덱스가 반드시 사용되어야 한다.")])]),v._v(" "),a("h4",{attrs:{id:"인메모리-db"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#인메모리-db"}},[v._v("#")]),v._v(" 인메모리 DB")]),v._v(" "),a("ul",[a("li",[v._v("위에서 설명된 모든 데이터 구조는 모두 디스크 한계에 대한 해결책이었다.")]),v._v(" "),a("li",[v._v("램의 가격이 저렴해지고, 여러 장비간 분산 저장이 가능한 시스템들이 확산되면서 "),a("code",[v._v("인메모리 DB")]),v._v("가 개발되었다.")]),v._v(" "),a("li",[v._v("인메모리 DB는 재시작 시 보통 디스크나 네트워크를 통해 데이터를 다시 적재해야 한다.")]),v._v(" "),a("li",[v._v("보통 인메모리 DB는 지속성을 위해 추가 전용 로그를 디스크에 기록한다.\n"),a("ul",[a("li",[v._v("레디스는 비동기로 디스크에 기록하므로 약한 지속성을 제공한다.")])])]),v._v(" "),a("li",[v._v("인메모리 DB 성능 장점이 디스크에서 읽지 않아도 된다는 사실이 아니라 디스크에 기록하기 위한 형태로 부호화하는 오버헤드를 피할 수 있어서 일 수도 있다.")])]),v._v(" "),a("h3",{attrs:{id:"oltp와-olap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oltp와-olap"}},[v._v("#")]),v._v(" OLTP와 OLAP")]),v._v(" "),a("p",[v._v("일반적인 애플리케이션은 인덱스를 이용해 일부 키에 대한 적은 수의 레코드를 찾고, 레코드는 사용자 입력을 기반으로 삽입되거나 갱신된다. 이런 대화식 애플리케이션들의 접근 패턴을 "),a("code",[v._v("OLTP(online transaction processing)")]),v._v("이라고 한다.")]),v._v(" "),a("p",[v._v("애플리케이션은 OLTP이외에도 비즈니스 분석가가 비즈니스 의사결정을 돕기 위한 보고서(business intelligence)를 제공한다. 이런 데이터베이스 사용 패턴을 트랜잭션 처리와 구별하기 위해 "),a("code",[v._v("OLAP(online analytic processing)")]),v._v("라고 부른다.")]),v._v(" "),a("ul",[a("li",[v._v("OLAP를 위한 개별 데이터베이스를 "),a("code",[v._v("데이터 웨어하우스(data warehouse)")]),v._v("라고 부른다.")])]),v._v(" "),a("h4",{attrs:{id:"oltp와-olap-특성-비교"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oltp와-olap-특성-비교"}},[v._v("#")]),v._v(" OLTP와 OLAP 특성 비교")]),v._v(" "),a("table",[a("thead",[a("tr",[a("th",[v._v("특성")]),v._v(" "),a("th",[v._v("트랜잭션 처리 시스템(OLTP)")]),v._v(" "),a("th",[v._v("분석 시스템(OLAP)")])])]),v._v(" "),a("tbody",[a("tr",[a("td",[v._v("주요 읽기 패턴")]),v._v(" "),a("td",[v._v("쿼리당 적은 수의 레코드, 키 기준으로 쿼리")]),v._v(" "),a("td",[v._v("많은 레코드에 대한 집계")])]),v._v(" "),a("tr",[a("td",[v._v("주요 쓰기 패턴")]),v._v(" "),a("td",[v._v("임의 접근, 사용자 입력을 낮은 레이턴시로 기록")]),v._v(" "),a("td",[v._v("대규모 불러오기 또는 이벤트 스트림")])]),v._v(" "),a("tr",[a("td",[v._v("주요 사용처")]),v._v(" "),a("td",[v._v("웹 애플리케이션을 통한 최종 사용자/소비자")]),v._v(" "),a("td",[v._v("의사결정 지원을 위한 내부 분석가")])]),v._v(" "),a("tr",[a("td",[v._v("데이터 표현")]),v._v(" "),a("td",[v._v("데이터의 최신 상태")]),v._v(" "),a("td",[v._v("시간이 지나며 일어난 이벤트 이력")])]),v._v(" "),a("tr",[a("td",[v._v("데이터셋 크기")]),v._v(" "),a("td",[v._v("기가이트 ~ 테라바이트")]),v._v(" "),a("td",[v._v("테라바이트 ~ 페타바이트")])])])]),v._v(" "),a("h4",{attrs:{id:"데이터-웨어하우징"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터-웨어하우징"}},[v._v("#")]),v._v(" 데이터 웨어하우징")]),v._v(" "),a("ul",[a("li",[v._v("OLTP 시스템은 대개 비즈니스 운영에 매우 중요하므로 일반적으로 높은 가용성과 낮은 지연 시간의 트랜잭션 처리를 기대한다. 그러므로 OLTP 데이터베이스 시스템은 철저하게 보호되어야 한다.")]),v._v(" "),a("li",[v._v("반대로 "),a("code",[v._v("데이터 웨어하우스")]),v._v("는 분석가들이 OLTP 작업에 영향을 주지 않고 마음껏 질의할 수 있는 개별 데이터 베이스이다.")]),v._v(" "),a("li",[v._v("데이터는 OLTP 데이터베이스에서 "),a("code",[v._v("추출(extract)")]),v._v("하고 분석 친화적인 스키마로 "),a("code",[v._v("변환(transform)")]),v._v("하고 정리한 후 데이터 웨어하우스에 "),a("code",[v._v("적재(load)")]),v._v("한다.\n"),a("ul",[a("li",[v._v("이러한 과정을 "),a("code",[v._v("ETL(Extract-Transform-Load)")]),v._v("이라고 부른다.")])])]),v._v(" "),a("li",[v._v("분석을 위해 OLTP 시스템이 아닌 개별 데이터 웨어하우스를 사용하는 큰 장점은 분석 접근 패턴맞게 최적화할 수 있는 것이다.")]),v._v(" "),a("li",[v._v("위에서 설명했던 인덱스 알고리즘들은 OLTP에서는 잘 동작하지만 분석 질의 응답에는 별로 좋지 않은 편이다. 분석 질의 응답에 최적화되는 저장소 엔진을 살펴보자.")])]),v._v(" "),a("h4",{attrs:{id:"oltp-데이터베이스와-데이터-웨어하우스의-차이점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oltp-데이터베이스와-데이터-웨어하우스의-차이점"}},[v._v("#")]),v._v(" OLTP 데이터베이스와 데이터 웨어하우스의 차이점")]),v._v(" "),a("ul",[a("li",[v._v("표면적으로 둘 모두 SQL 질의 인터페이스를 지원하기 때문에 비슷해 보이지만 각각 매우 다른 쿼리 패턴에 최적화되어 있기 때문에 시스템 내부는 완전히 다르다.\n"),a("ul",[a("li",[v._v("다수의 DB Vendor는 트랜잭션 처리와 분석 작업부하 모두를 지원하기 보다 둘 중 하나를 잘 지원하는데 중점을 두고 있다.")]),v._v(" "),a("li",[v._v("데이터 웨어하우스 시스템의 대표적인 예로 "),a("code",[v._v("Apache Hive, Spark SQL, Facebook Presto")]),v._v(" 등이 있다.")])])])]),v._v(" "),a("h3",{attrs:{id:"정리-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정리-2"}},[v._v("#")]),v._v(" 정리")]),v._v(" "),a("p",[v._v("고수준에서 저장소 엔진은 트랜잭션 처러 최적화(OLTP)와 분석 최적화(OLAP)라는 큰 두 가지 범주로 나눈다.")]),v._v(" "),a("ul",[a("li",[v._v("OLTP 시스템은 보통 사용자 대면이기 때문에 대량의 요청을 감당할 수 있고 쿼리마다 일부 키에 대한 작은 수의 레코드를 다룬다.\n"),a("ul",[a("li",[v._v("일부 키에 대한 데이터를 찾기 위한 인덱스를 사용하고 이 경우 대개 디스크 탐색이 병목이 된다.")])])]),v._v(" "),a("li",[v._v("OLAP 시스템은 최종 사용자가 아닌 비즈니스 분석가가 주로 사용하며 OLTP 시스템보다 각 쿼리는 매우 많은 레코드들을 스캔해야 한다.\n"),a("ul",[a("li",[v._v("이 경우 일반적으로 디스크 탐색이 아닌 디스크 대역폭이 병목이된다.")])])])]),v._v(" "),a("p",[v._v("OLTP 측면에서 LSM 트리와 B 트리 방식을 살펴봤다.")]),v._v(" "),a("ul",[a("li",[v._v("LSM 트리 관점에선 파일에 추가와 오래된 파일의 삭제만 허용하고 "),a("strong",[v._v("한 번 쓰여진 파일은 절대 갱신하지 않는다.")]),v._v(" "),a("ul",[a("li",[v._v("카산드라, HBase, 루씬등이 이 그룹에 속한다.")])])]),v._v(" "),a("li",[v._v("B 트리 관점에선 덮어쓰기 할 수 있는 고정 크기 페이지의 셋으로 디스크를 나눈다.\n"),a("ul",[a("li",[v._v("B 트리는 모든 주요 관계형 데이터베이스와 많은 비정형 데이터베이스에서도 사용한다.")])])])]),v._v(" "),a("p",[v._v("애플리케이션 개발자가 저장소 엔진의 내부에 대한 지식이 있다면 특정 애플리케이션에 어떤 도구가 적합한지 판단하기 유리하다. 데이터베이스 파라미터 조정이 필요하다면 이런 이해는 설정 값이 가지는 효과가 무엇인지 상상할 수 있게 해준다.")]),v._v(" "),a("h2",{attrs:{id:"chapter-4-부호화와-발전"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-4-부호화와-발전"}},[v._v("#")]),v._v(" Chapter 4. 부호화와 발전")]),v._v(" "),a("p",[v._v("데이터 타입이나 스키마가 변경될 떄 애플리케이션 코드에 대한 변경이 종종 발생한다. 하지만 대규모 애플리케이션에서 코드 변경은 대개 즉시 반영할 수 없다.")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("서버 측 애플리케이션")]),v._v("은 새로운 버전이 잘 동작하는지 몇 개의 노드에서만 확인 후 순차적으로 모든 노드에 실행되게 하는 rollout 방식을 주로 사용한다.")]),v._v(" "),a("li",[a("code",[v._v("클라이언트 측 애플리케이션")]),v._v("은 사용자에게 전적으로 좌우된다. 사용자가 업데이트 하지 않으면 적용할 수 없다.")])]),v._v(" "),a("br"),v._v(" "),a("p",[a("strong",[v._v("이것은 예전 버전의 코드와 새로운 버전의 코드가 공존할 수 있다는 의미다. 시스템이 계쏙 원할하게 실행되게 하기 위해 양뱡향으로 호한성을 유지해야 한다.")])]),v._v(" "),a("ul",[a("li",[a("code",[v._v("하위 호환성")]),v._v(": 새로운 코드는 예전 코드가 기록한 데이터를 읽을 수 있어야 한다.")]),v._v(" "),a("li",[a("code",[v._v("상위 호환성")]),v._v(": 예전 코드는 새로운 코드가 기록한 데이터를 읽을 수 있어야 한다.")])]),v._v(" "),a("p",[v._v("새로운 코드는 예전 버전의 코드가 기록한 데이터의 형식을 명확히 알 수 있기 때문에 "),a("strong",[v._v("하위 호환성은 일반적으로 어렵지 않다.")])]),v._v(" "),a("p",[v._v("하지만 예전 코드가 새로운 코드가 기록한 데이터의 형식을 예측할 수 없기 떄문에 "),a("strong",[v._v("상위 호환성은 일반적으로 다루기 더 어렵다.")])]),v._v(" "),a("h3",{attrs:{id:"데이터-부호화-형식"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터-부호화-형식"}},[v._v("#")]),v._v(" 데이터 부호화 형식")]),v._v(" "),a("p",[v._v("프로그램은 보통 두 가지 형태로 표현된 데이터를 사용해 동작한다.")]),v._v(" "),a("ul",[a("li",[v._v("메모리에 객체, 배열등의 데이터를 CPU에서 효율적으로 접근하고 조작할 수 있게(보통은 포인터를 이용해) 최적화된다.")]),v._v(" "),a("li",[v._v("데이터를 파일에 쓰거나 네트워크를 통해 전송하기 위해선 일련의 바이트열(JSON 같은)의 형태로 부호화해야 한다.")]),v._v(" "),a("li",[a("strong",[v._v("포인터는 다른 프로세스가 이해할 수 없기 떄문에 이 일련의 바이트열은 보통 메모리에서 사용하는 데이터구조와는 상당히 다르다.")])])]),v._v(" "),a("p",[v._v("두 가지 표현 사이의 일종의 전환하다.")]),v._v(" "),a("ul",[a("li",[v._v("인메모리 표현에서 바이트열로의 전환을 "),a("code",[v._v("부호화(직렬화, 마샬링)")]),v._v("라고 한다.")]),v._v(" "),a("li",[v._v("바이트열에서 인메모리 표현으로의 전환을 "),a("code",[v._v("복호화(역직렬화, 언마샬링)")]),v._v("라고 한다.")])]),v._v(" "),a("h3",{attrs:{id:"언어별-부호화-기능"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#언어별-부호화-기능"}},[v._v("#")]),v._v(" 언어별 부호화 기능")]),v._v(" "),a("ul",[a("li",[v._v("많은 프로그래밍 언어는 인메모리 객체를 바이트열로 부호화하는 기능을 내장한다.(대표적으로 Java의 Serializable)")]),v._v(" "),a("li",[a("strong",[v._v("이러한 부호화 라이브러리는 편리하지만 심각한 문제점들이 많이 때문에 일반적으로 이를 사용하는건 좋지 않다.")]),v._v(" "),a("ul",[a("li",[v._v("특정 언어에 결합되어 있어 다른 언어에 지원이 좋지 못하다.")]),v._v(" "),a("li",[v._v("동일한 객체 유형의 데이터를 복원하기 위해 복호화 과정에서 클래스를 인스턴스화할 수 있어야하고 이것은 보안의 큰 문제가 될 수 있다.")])])])]),v._v(" "),a("h3",{attrs:{id:"json과-xml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json과-xml"}},[v._v("#")]),v._v(" JSON과 XML")]),v._v(" "),a("p",[v._v("JSON과 XML은 널리 알려져 사용되는 부호화방식으로 사람이 읽을 수 있는 텍스트 형식으로 부호화한다. 다양한 용도에 사용하기 충분하지만 몇 가지 결점이 있다.")]),v._v(" "),a("ul",[a("li",[v._v("수(number)호화에 많은 애매함이 존재한다. XML은 수와 숫자로 구성된 문자열을 구분할 수 없다. JSON은 문자열과 수를 구분할 수있으나 부동소수점을 구별하지 않는다.")]),v._v(" "),a("li",[v._v("유니코드 문자열을 잘 지원하지만 이진 문자열을 지원하지 않는다. JSON이나 XML로 이진 문자열을 보내기 위해 Base64를 사용해 텍스트로 부호화해야 한다.")])]),v._v(" "),a("h3",{attrs:{id:"이진-부호화"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이진-부호화"}},[v._v("#")]),v._v(" 이진 부호화")]),v._v(" "),a("p",[v._v("프로토콜 버퍼가 대표적인 이진 부호화 라이브러리이다. 프로토콜 버퍼는 부호화할 데이터를 위한 "),a("code",[v._v("스키마")]),v._v("가 필요하다.")]),v._v(" "),a("p",[v._v("스키마를 정의하면 라이브러리를 통해 언어별 적절한 인터페이스를 생성해주고 이를 통해 부호화 및 복호화가 가능하다.")]),v._v(" "),a("ul",[a("li",[v._v("스키마를 정의할 때 "),a("code",[v._v("필드 태그")]),v._v("가 포함되는데 부호화 및 복호화 시 실제 필드명이 아닌 이 필드 태그를 사용하여 효율적으로 동작할 수 있게 한다.")])]),v._v(" "),a("h4",{attrs:{id:"필드-태그와-스키마-발전"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#필드-태그와-스키마-발전"}},[v._v("#")]),v._v(" 필드 태그와 스키마 발전")]),v._v(" "),a("ul",[a("li",[v._v("부호화 시 실제 필드명이 아닌 필드 태그를 활용하므로 "),a("strong",[v._v("필드 태그는 부호화된 데이터를 해석하기 위해 매우 중요하다.")])]),v._v(" "),a("li",[v._v("부호화된 데이터는 필드명을 참조하지 않으므로 스키마에서 필드명은 변경할 수 있으나 "),a("strong",[v._v("필드 태그는 기존 모든 부호화된 데이터에 영향을 주므로 변경할 수 없다.")])]),v._v(" "),a("li",[v._v("필드에 새로운 태그 번호를 부여하여 스키마에 새로운 필드를 추가할 수 있다. "),a("strong",[v._v("예전 코드에서는 새로운 스키마로 기록된 데이터를 읽더라도 새로운 필드는 간단히 무시할 수 있으므로 상위 호환성을 유지한다.")])]),v._v(" "),a("li",[v._v("각 필드의 고유한 태그 번호는 변경되지 않으므로 새로운 필드는 required를 설정할 수 없도록 하면 "),a("strong",[v._v("새로운 코드가 예전에 기록된 데이터를 읽는데도 문제가 없어 하위 호환성 또한 유지할 수 있다.")]),v._v(" "),a("ul",[a("li",[v._v("즉, 하위 호환성을 위해서는 새롭게 추가된 필드는 반드시 optional이거나 기본값을 가져야 한다.")])])]),v._v(" "),a("li",[v._v("필드 삭제인 경우 optional 필드만 삭제가 가능하고 삭제된 필드와 동일한 태그 번호는 절대 다시 사용할 수 없다.")])]),v._v(" "),a("h4",{attrs:{id:"데이터타입과-스키마-발전"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터타입과-스키마-발전"}},[v._v("#")]),v._v(" 데이터타입과 스키마 발전")]),v._v(" "),a("ul",[a("li",[v._v("필드의 데이터타입을 변경하는건 불가능하지 않지만 값이 정확하지 않거나 잘릴 위험이 있다.\n"),a("ul",[a("li",[v._v("32비트 정수를 64비트 정수로 변경하려고 하는 경우 하위 호환성을 유지할 수 있으나 상위 호환성을 유지하지 못한다.(새로운 스키마로 64bit 정수로 작성된 데이터를 예전 코드에서는 32bit 정수로 읽게 된다.)")])])]),v._v(" "),a("li",[v._v("프로토콜 버퍼는 배열 타입은 없는 대신 다중 값을 표현하는 "),a("code",[v._v("repeated")]),v._v(" 표시자가 존재한다.\n"),a("ul",[a("li",[v._v("다중 값의 특징에 따라 단일 값을 표현하는 "),a("code",[v._v("optional")]),v._v("을 "),a("code",[v._v("repeated")]),v._v("로 변경해도 문제가 없다.")])])])]),v._v(" "),a("h3",{attrs:{id:"스키마의-장점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#스키마의-장점"}},[v._v("#")]),v._v(" 스키마의 장점")]),v._v(" "),a("ul",[a("li",[v._v("부호회된 데이터에서 필드 이름을 생략할 수 있기 때문에 크기를 대폭 줄일 수 있다.")]),v._v(" "),a("li",[v._v("스키마는 유용한 문서화 형식으로 복호화를 할 때 스키마가 필요하기 때문에 스키마가 최신 상태인지 확신할 수 있다.")]),v._v(" "),a("li",[v._v("스키마 데이터베이스를 유지하면 스키마 변경이 적용되기 전 상위 호환성과 하위 호환성을 확인할 수 있다.")]),v._v(" "),a("li",[v._v("정적 타입 프로그래밍 언어에서 스키마로부터 코드를 생성하는 기능은 컴파일 타임 체크가 가능하므로 매우 유용하다.")])]),v._v(" "),a("h3",{attrs:{id:"데이터플로-모드"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터플로-모드"}},[v._v("#")]),v._v(" 데이터플로 모드")]),v._v(" "),a("p",[v._v("데이터플로는 매우 추상적인 개념으로 하나의 프로세스에서 다른 프로세스로 데이터를 전달하는 방법은 아주 많다. 누가 데이터를 복호화하고 누가 그것을 부호화할까?")]),v._v(" "),a("p",[v._v("데이터플로는 데이터베이스를 통해서, 서비스 호출을 통해서, 비동기 메시지 전달을 통해서 등등 다양하게 이루어질 수 있다.")]),v._v(" "),a("h4",{attrs:{id:"데이터베이스를-통한-데이터플로"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터베이스를-통한-데이터플로"}},[v._v("#")]),v._v(" 데이터베이스를 통한 데이터플로")]),v._v(" "),a("ul",[a("li",[v._v("데이터베이스에 기록하는 프로세스는 데이터를 부호화하고 데이터베이스에서 읽는 프로세스는 데이터를 복호화한다.")]),v._v(" "),a("li",[v._v("이전에 기록한 내용을 미래에서 복호화 가능해야 하므로 "),a("strong",[v._v("하위 호환성은 반드시 필요하다.")])]),v._v(" "),a("li",[v._v("새로운 버전의 코드로 기록된 값을 예전 버전의 코드가 읽을 가능성 또한 존재하므로 데이터베이스에서 "),a("strong",[v._v("상위 호환성도 대게 필요하다.")]),v._v(" "),a("ul",[a("li",[v._v("새로운 버전 코드에서 기록된 값을 예전 버전의 코드가 읽어서 갱신 후 다시 기록할 때 상황에 따라 새로운 버전에 추가된 필드가 제거될 수 있다. 이런 경우 애플리케이션에서 주의가 필요하다.")])])]),v._v(" "),a("li",[v._v("보통 스키마가 변경되었을 때 기존 데이터를 마이그레이션 하는건 비용이 크기때문에 기존 데이터를 유지하고 새로운 필드에 null을 기본값을 갖도록 하여 스키마 변경을 가능하게 한다.(MySQL은 항상 전체 테이블을 다시 기록한다.)")])]),v._v(" "),a("h4",{attrs:{id:"서비스-호출-rest와-rpc-을-통한-데이터플로"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#서비스-호출-rest와-rpc-을-통한-데이터플로"}},[v._v("#")]),v._v(" 서비스 호출(REST와 RPC)을 통한 데이터플로")]),v._v(" "),a("ul",[a("li",[v._v("서비스 지향 및 MSA의 핵심 설계 목표는 서비스를 배포와 변경에 독립적으로 만들어 애플리케이션의 유지보수와 확장을 더 쉽게 할 수 있게 만드는 것이다.")]),v._v(" "),a("li",[a("strong",[v._v("그러므로 서버와 클라이언트가 사용하는 데이터 부호화는 서비스 API 버전 간 호환이 가능해야 한다.")])])]),v._v(" "),a("h4",{attrs:{id:"비동기-메시지-전달을-통한-데이터플로"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#비동기-메시지-전달을-통한-데이터플로"}},[v._v("#")]),v._v(" 비동기 메시지 전달을 통한 데이터플로")]),v._v(" "),a("ul",[a("li",[v._v("메시지를 직접 네트워크 연결로 전송하지 않고 임시로 메시지를 저장하는 메시지 브로커라는 중간 단계를 거쳐 전송한다는 점에서 데이터베이스와 유사하다.")]),v._v(" "),a("li",[v._v("메시지를 낮은 지연 시간으로 다른 프로세스에 전달한다는 점에서는 RPC와 비슷하지만 "),a("strong",[v._v("메시지 브로커 방식은 RPC 방식보다 여러 장점이 있다.")]),v._v(" "),a("ul",[a("li",[v._v("수신자가 사용 불가 상태에 빠져도 메시지 브로커가 버퍼로 동작할 수 있기 때문에 시스템 안정성이 향상된다.")]),v._v(" "),a("li",[v._v("메시지 브로커가 메시지를 저장하므로 메시지 유실을 방지할 수 있다.")]),v._v(" "),a("li",[v._v("송신자와 수신자가 서로 알 필요가 없으므로 서로간에 의존성이 없다.")]),v._v(" "),a("li",[v._v("하나의 메시지를 여러 수신자로 전송할 수 있다.")])])]),v._v(" "),a("li",[v._v("추가적으로 "),a("strong",[v._v("메시지 전달 방식은 송신 프로세스가 응답을 기대하지 않으므로 단방향이다.")])])])])}),[],!1,null,null,null);_.default=l.exports}}]);